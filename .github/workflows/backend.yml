name: Backend CI & Deploy

on:
  push:
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  build-test-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: gradlew permissions
        run: chmod +x gradlew
        working-directory: ./backend

      - name: Run tests
        run: ./gradlew test
        working-directory: ./backend

      - name: Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest
        working-directory: ./backend

      - name: Build JAR
        run: ./gradlew build
        working-directory: ./backend

      - name: Upload JAR to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_VM_SSH_KEY }}
          source: "./backend/build/libs/backend-0.0.1.jar"
          target: "~/devops-final-project/"
          strip_components: 3

      - name: get .env.production
        run: |
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" > ./backend/.env.production
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> ./backend/.env.production
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> ./backend/.env.production

      - name: upload .env.production to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_VM_SSH_KEY }}
          source: "./backend/.env.production"
          target: "~/devops-final-project/backend/"

      - name: remove local .env.production
        run: rm ./backend/.env.production

      - name: SSH Deploy to GCP VM and docker compose up -d
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_VM_SSH_KEY }}
          script: |
            # Create dirs if not exist
            mkdir -p ~/devops-final-project/infra
            mkdir -p ~/devops-final-project/backend/build/libs
            
            # Pull latest code if repo exists, otherwise clone
            if [ -d ~/devops-final-project/.git ]; then
              cd ~/devops-final-project && git pull origin main
            else
              cd ~ && git clone https://github.com/<your-repo> devops-final-project
            fi
            
            cd ~/devops-final-project/infra
            
            if command -v docker-compose > /dev/null; then
              docker-compose build backend
              docker-compose up -d
            else
              docker compose build backend
              docker compose up -d
            fi
            
            docker image prune -f
