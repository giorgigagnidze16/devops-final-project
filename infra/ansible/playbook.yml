- name: Upload compose file to GCP VM
  hosts: gcp
  become: yes
  tasks:
    - name: Display OS release info for debugging
      ansible.builtin.shell: |
        echo "--- lsb_release -a ---"
        lsb_release -a
        echo "--- cat /etc/os-release ---"
        cat /etc/os-release
        echo "--- content of /etc/apt/sources.list ---"
        cat /etc/apt/sources.list
        echo "--- files in /etc/apt/sources.list.d/ ---"
        ls -la /etc/apt/sources.list.d/
        echo "--- content of files in /etc/apt/sources.list.d/ ---"
        for f in /etc/apt/sources.list.d/*; do echo "File: $f"; cat "$f"; echo "---"; done
      register: os_info_debug
      changed_when: false # This task doesn't change state
      # Ensure this task runs even if previous ones fail for debugging
      ignore_errors: true

    - name: Print OS debugging info
      ansible.builtin.debug:
        var: os_info_debug.stdout_lines

    - name: Install required apt dependencies
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes # This will still fail if sources are bad, but good to keep here

    - name: Ensure /etc/apt/keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Remove any old Docker source files (aggressive wildcard cleanup)
      ansible.builtin.shell: |
        # Remove any file that likely contains docker repo info
        find /etc/apt/sources.list.d/ -name "*docker*.list" -delete || true
        # Also check for any 'ubuntu' specific docker list if it somehow exists
        find /etc/apt/sources.list.d/ -name "*ubuntu*.list" -exec grep -l -E "docker|ubuntu" {} + -delete || true
      args:
        warn: false
      # Ensure this task runs even if some files aren't found
      changed_when: true
      ignore_errors: true # In case no files match, find returns non-zero

    - name: Attempt to clean up apt cache and lists
      ansible.builtin.apt:
        autoclean: yes
        clean: yes
        update_cache: yes
      ignore_errors: true # Might still fail due to bad repo, but helps clear internal state

    - name: Add Docker GPG apt Key for Debian
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Get Debian codename
      ansible.builtin.shell: lsb_release -cs
      register: debian_codename
      changed_when: false

    - name: Add Docker repository for Debian using discovered codename
      ansible.builtin.shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ debian_codename.stdout }} stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update apt cache (after adding Docker repo)
      apt:
        update_cache: yes

    - name: Ensure Docker Engine is installed
      apt:
        name: docker-ce
        state: present

    - name: Ensure Compose is installed
      apt:
        name: docker-compose-plugin
        state: present

    - name: Remove existing compose.yml from /tmp if present
      ansible.builtin.file:
        path: /tmp/compose.yml
        state: absent

    - name: Upload compose.yml to /tmp
      ansible.builtin.copy:
        src: ./compose.yml
        dest: /tmp/compose.yml
        owner: "{{ ansible_user }}"
        mode: '0644'